{
	"version":
		3,
	"file":
		"j-eol.min.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","../../j-groupify/src/groupify.ts","../../j-regexp/src/clearRegExp.ts","export.ts"],
	"sourcesContent":
		[
			"export default '1.1.0';",
			"import create from '.Object.create?=';\n\nvar NEED_TO_ESCAPE_IN_REGEXP = /^[$()*+\\-.?[\\\\\\]^{|]/;\nvar SURROGATE_PAIR = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nvar GROUP        = create(null);\n\nexport default function groupify (branches          , uFlag          , noEscape          )         {\n\tvar group        = create(null);\n\tvar appendBranch = uFlag ? appendPointBranch : appendCodeBranch;\n\tfor ( var length         = branches.length, index         = 0; index<length; ++index ) { appendBranch(group, branches[index]); }\n\treturn sourcify(group, !noEscape);\n};\n\nfunction appendPointBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar char         = SURROGATE_PAIR.test(branch) ? branch.slice(0, 2) : branch.charAt(0);\n\t\tappendPointBranch(group[char] || ( group[char] = create(null) ), branch.slice(char.length));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction appendCodeBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar char         = branch.charAt(0);\n\t\tappendCodeBranch(group[char] || ( group[char] = create(null) ), branch.slice(1));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction sourcify (group       , needEscape         )         {\n\tvar branches           = [];\n\tvar singleCharactersBranch           = [];\n\tvar noEmptyBranch          = true;\n\tfor ( var char in group ) {\n\t\tif ( char ) {\n\t\t\tvar sub_branches         = sourcify(group[char], needEscape);\n\t\t\tif ( needEscape && NEED_TO_ESCAPE_IN_REGEXP.test(char) ) { char = '\\\\'+char; }\n\t\t\tsub_branches ? branches.push(char+sub_branches) : singleCharactersBranch.push(char);\n\t\t}\n\t\telse { noEmptyBranch = false; }\n\t}\n\tsingleCharactersBranch.length && branches.unshift(singleCharactersBranch.length===1 ? singleCharactersBranch[0] : '['+singleCharactersBranch.join('')+']');\n\treturn branches.length===0\n\t\t? ''\n\t\t: ( branches.length===1 && ( singleCharactersBranch.length || noEmptyBranch )\n\t\t\t? branches[0]\n\t\t\t: '(?:'+branches.join('|')+')'\n\t\t)\n\t\t+( noEmptyBranch ? '' : '?' );\n}\n\n                                       \n",
			"import RegExp from '.RegExp';\n\nvar clearRegExp = '$_' in RegExp\n\t? function () {\n\t\tvar REGEXP = /^/;\n\t\treturn function clearRegExp                (value    )                {\n\t\t\tREGEXP.test('');\n\t\t\treturn value;\n\t\t};\n\t}()\n\t: function clearRegExp                (value    )                {\n\t\treturn value;\n\t};\n\nexport default clearRegExp;",
			"import version from './version?text';\nexport { version };\n\nimport SyntaxError from '.SyntaxError';\nimport RegExp from '.RegExp';\nimport isArray from '.Array.isArray?=';\n\nimport { groupify } from '@ltd/j-groupify';\nimport { clearRegExp } from '@ltd/j-regexp';\n\nexport function EOL                     (allow                , disallow_uniform                              , uniform_disallow                              ) {\n\t\n\tif ( typeof disallow_uniform==='object' ) {\n\t\tDISALLOW = isArray(disallow_uniform) ? new RegExp(groupify(disallow_uniform)) : disallow_uniform;\n\t\tFIRST = !uniform_disallow;\n\t}\n\telse if ( typeof uniform_disallow==='object' ) {\n\t\tDISALLOW = isArray(uniform_disallow) ? new RegExp(groupify(uniform_disallow)) : uniform_disallow;\n\t\tFIRST = !disallow_uniform;\n\t}\n\telse {\n\t\tFIRST = !( uniform_disallow || disallow_uniform );\n\t}\n\tvar DISALLOW        ;\n\tvar FIRST         ;\n\tvar ALLOW = isArray(allow) ? new RegExp(groupify(allow), FIRST ? '' : 'g') : allow;\n\t\n\treturn function EOL (string        )           {\n\t\tif ( DISALLOW && DISALLOW.test(string) ) { throw clearRegExp(SyntaxError)('存在禁用换行符'); }\n\t\tvar eols               =                clearRegExp(string.match(ALLOW));\n\t\tif ( !eols ) { return ''; }\n\t\tif ( FIRST ) { return eols[0]; }\n\t\tvar eol = eols[0];\n\t\tfor ( var length = eols.length, index = 1; index<length; ++index ) { if ( eols[index]!==eol ) { throw SyntaxError('存在多种换行符'); } }\n\t\treturn eol;\n\t};\n\t\n}\n\nexport var LF     = '\\n';\nexport var VT     = '\\x0B';\nexport var FF     = '\\f';\nexport var CRLF       = '\\r\\n';\nexport var CR     = '\\r';\nexport var NEL      = '\\x85';\nexport var LS     = '\\u2028';\nexport var PS     = '\\u2029';\n\n                      \n                        \n                      \n                          \n                      \n                         \n                          \n                          \n\nimport Default from '.default?=';\nexport default Default(EOL, {\n\tversion: version,\n\tEOL: EOL,\n\tLF: LF,\n\tVT: VT,\n\tFF: FF,\n\tCRLF: CRLF,\n\tCR: CR,\n\tNEL: NEL,\n\tLS: LS,\n\tPS: PS\n});"
		],
	"names":
		["NEED_TO_ESCAPE_IN_REGEXP","SURROGATE_PAIR","GROUP","create","groupify","branches","uFlag","noEscape","group","appendBranch","appendPointBranch","appendCodeBranch","length","index","sourcify","needEscape","singleCharactersBranch","noEmptyBranch","char","sub_branches","test","push","unshift","join","branch","slice","charAt","REGEXP","clearRegExp","RegExp","value","EOL","allow","disallow_uniform","uniform_disallow","DISALLOW","FIRST","isArray","ALLOW","string","SyntaxError","eols","match","eol","Default","version","LF","VT","FF","CRLF","CR","NEL","LS","PS"],
	"mappings":
		";;;;;;;;;;0LAAA,irDCEIA,EAA2B,uBAC3BC,EAAiB,kCACjBC,EAAeC,EAAO,MAE1B,SAAwBC,EAAUC,EAAoBC,EAAiBC,GAGtE,IAFA,IAAIC,EAAeL,EAAO,MACtBM,EAAeH,EAAQI,EAAoBC,EACrCC,EAAiBP,EAASO,OAAQC,EAAgB,EAAGA,EAAMD,IAAUC,EAAUJ,EAAaD,EAAOH,EAASQ,IACtH,OAmBD,SAASC,EAAUN,EAAcO,GAChC,IAAIV,EAAqB,GACzB,IAAIW,EAAmC,GACvC,IAAIC,GAAyB,EAC7B,IAAM,IAAIC,KAAQV,EACjB,GAAKU,EAAO,CACX,IAAIC,EAAuBL,EAASN,EAAMU,GAAOH,GAC5CA,GAAcf,EAAyBoB,KAAKF,KAAUA,EAAO,KAAKA,GACvEC,EAAed,EAASgB,KAAKH,EAAKC,GAAgBH,EAAuBK,KAAKH,QAExED,GAAgB,EAExBD,EAAuBJ,QAAUP,EAASiB,QAAwC,IAAhCN,EAAuBJ,OAAaI,EAAuB,GAAK,IAAIA,EAAuBO,KAAK,IAAI,KACtJ,OAAyB,IAAlBlB,EAASO,OACb,IACoB,IAAlBP,EAASO,SAAgBI,EAAuBJ,QAAUK,GAC3DZ,EAAS,GACT,MAAMA,EAASkB,KAAK,KAAK,MAEzBN,EAAgB,GAAK,KAtClBH,CAASN,GAAQD,GAGzB,SAASG,EAAmBF,EAAcgB,GACzC,GAAKA,EAAS,CACb,IAAIN,EAAejB,EAAemB,KAAKI,GAAUA,EAAOC,MAAM,EAAG,GAAKD,EAAOE,OAAO,GACpFhB,EAAkBF,EAAMU,KAAWV,EAAMU,GAAQf,EAAO,OAASqB,EAAOC,MAAMP,EAAKN,cAE7EJ,EAAM,IAAMN,EAGpB,SAASS,EAAkBH,EAAcgB,GACxC,GAAKA,EAAS,CACb,IAAIN,EAAeM,EAAOE,OAAO,GACjCf,EAAiBH,EAAMU,KAAWV,EAAMU,GAAQf,EAAO,OAASqB,EAAOC,MAAM,SAEvEjB,EAAM,IAAMN,ECxBpB,IAEMyB,EAFFC,EAAc,OAAQC,QAEpBF,EAAS,IACN,SAAqCG,GAE3C,OADAH,EAAOP,KAAK,IACLU,IAGP,SAASF,EAA4BE,GACtC,OAAOA,GCDF,SAASC,EAAyBC,EAAuBC,EAAgDC,GAa/G,IAAIC,EACAC,EAVHA,EAF8B,iBAAnBH,GACXE,EAAWE,EAAQJ,GAAoB,IAAIJ,OAAOzB,EAAS6B,IAAqBA,GACvEC,GAE0B,iBAAnBA,GAChBC,EAAWE,EAAQH,GAAoB,IAAIL,OAAOzB,EAAS8B,IAAqBA,GACvED,KAGEC,GAAoBD,GAIhC,IAAIK,EAAQD,EAAQL,GAAS,IAAIH,OAAOzB,EAAS4B,GAAQI,EAAQ,GAAK,KAAOJ,EAE7E,OAAO,SAAcO,GACpB,GAAKJ,GAAYA,EAASf,KAAKmB,GAAY,MAAMX,EAAYY,YAAZZ,CAAyB,WAC1E,IAAIa,EAAoCb,EAAYW,EAAOG,MAAMJ,IACjE,IAAMG,EAAS,MAAO,GACtB,GAAKL,EAAU,OAAOK,EAAK,GAE3B,IADA,IAAIE,EAAMF,EAAK,GACL7B,EAAS6B,EAAK7B,OAAQC,EAAQ,EAAGA,EAAMD,IAAUC,EAAU,GAAK4B,EAAK5B,KAAS8B,EAAQ,MAAMH,YAAY,WAClH,OAAOG,UAwBMC,EAAQb,EAAK,CAC3Bc,QH3Dc,QG4Ddd,IAAKA,EACLe,GAtBmB,KAuBnBC,GAtBmB,OAuBnBC,GAtBmB,KAuBnBC,KAtBuB,OAuBvBC,GAtBmB,KAuBnBC,IAtBqB,IAuBrBC,GAtBmB,SAuBnBC,GAtBmB"
}