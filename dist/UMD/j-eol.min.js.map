{
	"version":
		3,
	"file":
		"j-eol.min.js",
	"sourceRoot":
		"../../src/",
	"sources":
		["version?text","../../j-regexp/src/clearRegExp.ts","../../j-groupify/src/groupify.ts","export.ts"],
	"sourcesContent":
		[
			"export default '1.3.1';",
			"import RegExp from '.RegExp';\n\nvar clearRegExp = '$_' in RegExp\n\t? function () {\n\t\tvar REGEXP = /^/;\n\t\treturn function clearRegExp                (value    )                {\n\t\t\tREGEXP.test('');\n\t\t\treturn value;\n\t\t};\n\t}()\n\t: function clearRegExp                (value    )                {\n\t\treturn value;\n\t};\n\nexport default clearRegExp;",
			"import create from '.Object.create?=';\nimport NULL from '.null.prototype';\n\nvar NEED_TO_ESCAPE_IN_REGEXP = /^[$()*+\\-.?[\\\\\\]^{|]/;\nvar SURROGATE_PAIR = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nvar GROUP = create(NULL)         ;\n\nexport default function groupify (branches          , uFlag          , noEscape          )         {\n\tvar group = create(NULL)         ;\n\tvar appendBranch = uFlag ? appendPointBranch : appendCodeBranch;\n\tfor ( var length         = branches.length, index         = 0; index<length; ++index ) { appendBranch(group, branches[index]); }\n\treturn sourcify(group, !noEscape);\n};\n\nfunction appendPointBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar character         = SURROGATE_PAIR.test(branch) ? branch.slice(0, 2) : branch.charAt(0);\n\t\tappendPointBranch(group[character] || ( group[character] = create(NULL)          ), branch.slice(character.length));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction appendCodeBranch (group       , branch        )       {\n\tif ( branch ) {\n\t\tvar character         = branch.charAt(0);\n\t\tappendCodeBranch(group[character] || ( group[character] = create(NULL)          ), branch.slice(1));\n\t}\n\telse { group[''] = GROUP; }\n}\n\nfunction sourcify (group       , needEscape         )         {\n\tvar branches           = [];\n\tvar singleCharactersBranch           = [];\n\tvar noEmptyBranch          = true;\n\tfor ( var character in group ) {\n\t\tif ( character ) {\n\t\t\tvar sub_branches         = sourcify(group[character], needEscape);\n\t\t\tif ( needEscape && NEED_TO_ESCAPE_IN_REGEXP.test(character) ) { character = '\\\\'+character; }\n\t\t\tsub_branches ? branches.push(character+sub_branches) : singleCharactersBranch.push(character);\n\t\t}\n\t\telse { noEmptyBranch = false; }\n\t}\n\tsingleCharactersBranch.length && branches.unshift(singleCharactersBranch.length===1 ? singleCharactersBranch[0] : '['+singleCharactersBranch.join('')+']');\n\treturn branches.length===0\n\t\t? ''\n\t\t: ( branches.length===1 && ( singleCharactersBranch.length || noEmptyBranch )\n\t\t\t? branches[0]\n\t\t\t: '(?:'+branches.join('|')+')'\n\t\t)\n\t\t+( noEmptyBranch ? '' : '?' );\n}\n\n                                            \n",
			"import version from './version?text';\nexport { version };\n\nimport SyntaxError from '.SyntaxError';\nimport RegExp from '.RegExp';\nimport isArray from '.Array.isArray?=';\n\nimport { groupify, clearRegExp } from '@ltd/j-regexp';\n\nvar FLAGS = /\\/([a-fh-z]*)g([a-fh-z]*)$/;\n\nfunction removeGlobal (regExp        ) {\n\tvar flags = FLAGS.exec(''+regExp);\n\treturn flags ? RegExp(regExp, flags[1]+flags[2]) : regExp;\n}\n\nexport function EOL                     (allow                , disallow_uniform                              , uniform_disallow                              ) {\n\t\n\tvar DISALLOW        ;\n\tvar FIRST         ;\n\tif ( typeof disallow_uniform==='object' ) {\n\t\tDISALLOW = isArray(disallow_uniform) ? RegExp(groupify(disallow_uniform)) : removeGlobal(disallow_uniform);\n\t\tFIRST = !uniform_disallow;\n\t}\n\telse if ( typeof uniform_disallow==='object' ) {\n\t\tDISALLOW = isArray(uniform_disallow) ? RegExp(groupify(uniform_disallow)) : removeGlobal(uniform_disallow);\n\t\tFIRST = !disallow_uniform;\n\t}\n\telse {\n\t\tFIRST = !( uniform_disallow || disallow_uniform );\n\t}\n\tvar ALLOW = isArray(allow)\n\t\t? FIRST\n\t\t\t? RegExp(groupify(allow))\n\t\t\t: RegExp(groupify(allow), 'g')\n\t\t: allow;\n\t\n\treturn function EOL (string        )           {\n\t\tif ( DISALLOW && DISALLOW.test(string) ) { throw clearRegExp(SyntaxError)('存在禁用换行符'); }\n\t\tvar eols = clearRegExp(string.match(ALLOW))                ;\n\t\tif ( !eols ) { return ''; }\n\t\tif ( FIRST ) { return eols[0]; }\n\t\tvar eol = eols[0];\n\t\tfor ( var length = eols.length, index = 1; index<length; ++index ) { if ( eols[index]!==eol ) { throw SyntaxError('存在多种换行符'); } }\n\t\treturn eol;\n\t};\n\t\n}\n\nexport var LF     = '\\n';\nexport var VT     = '\\x0B';\nexport var FF     = '\\f';\nexport var CRLF       = '\\r\\n';\nexport var CR     = '\\r';\nexport var NEL      = '\\x85';\nexport var LS     = '\\u2028';\nexport var PS     = '\\u2029';\n\n                      \n                        \n                      \n                          \n                      \n                         \n                          \n                          \n\nimport Default from '.default?=';\nexport default Default(EOL, {\n\tversion: version,\n\tEOL: EOL,\n\tLF: LF,\n\tVT: VT,\n\tFF: FF,\n\tCRLF: CRLF,\n\tCR: CR,\n\tNEL: NEL,\n\tLS: LS,\n\tPS: PS\n});"
		],
	"names":
		["REGEXP","clearRegExp","RegExp","value","test","NEED_TO_ESCAPE_IN_REGEXP","SURROGATE_PAIR","GROUP","create","NULL","groupify","branches","uFlag","noEscape","group","appendBranch","appendPointBranch","appendCodeBranch","length","index","sourcify","needEscape","singleCharactersBranch","noEmptyBranch","character","sub_branches","push","unshift","join","branch","slice","charAt","FLAGS","removeGlobal","regExp","flags","exec","EOL","allow","disallow_uniform","uniform_disallow","DISALLOW","FIRST","isArray","ALLOW","string","SyntaxError","eols","match","eol","Default","version","LF","VT","FF","CRLF","CR","NEL","LS","PS"],
	"mappings":
		"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"
}